{"version":3,"file":"dynamic_scheme.js","sourceRoot":"","sources":["dynamic_scheme.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {DynamicColor} from './dynamic_color.js';\nimport {MaterialDynamicColors} from './material_dynamic_colors.js';\nimport {Variant} from './variant.js';\n\n/**\n * @param sourceColorArgb The source color of the theme as an ARGB 32-bit\n *     integer.\n * @param variant The variant, or style, of the theme.\n * @param contrastLevel Value from -1 to 1. -1 represents minimum contrast,\n * 0 represents standard (i.e. the design as spec'd), and 1 represents maximum\n * contrast.\n * @param isDark Whether the scheme is in dark mode or light mode.\n * @param primaryPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually\n * colorful.\n * @param secondaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * less colorful.\n * @param tertiaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * a different hue from primary and colorful.\n * @param neutralPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually not\n * colorful at all, intended for background & surface colors.\n * @param neutralVariantPalette Given a tone, produces a color. Hue and chroma\n * of the color are specified in the design specification of the variant.\n * Usually not colorful, but slightly more colorful than Neutral. Intended for\n * backgrounds & surfaces.\n */\ninterface DynamicSchemeOptions {\n  sourceColorArgb: number;\n  variant: Variant;\n  contrastLevel: number;\n  isDark: boolean;\n  primaryPalette: TonalPalette;\n  secondaryPalette: TonalPalette;\n  tertiaryPalette: TonalPalette;\n  neutralPalette: TonalPalette;\n  neutralVariantPalette: TonalPalette;\n}\n\n/**\n * Constructed by a set of values representing the current UI state (such as\n * whether or not its dark theme, what the theme style is, etc.), and\n * provides a set of TonalPalettes that can create colors that fit in\n * with the theme style. Used by DynamicColor to resolve into a color.\n */\nexport class DynamicScheme {\n  /**\n   * The source color of the theme as an HCT color.\n   */\n  sourceColorHct: Hct;\n  /**\n   * Given a tone, produces a reddish, colorful, color.\n   */\n  errorPalette: TonalPalette;\n\n  /** The source color of the theme as an ARGB 32-bit integer. */\n  readonly sourceColorArgb: number;\n\n  /** The variant, or style, of the theme. */\n  readonly variant: Variant;\n\n  /**\n   * Value from -1 to 1. -1 represents minimum contrast. 0 represents standard\n   * (i.e. the design as spec'd), and 1 represents maximum contrast.\n   */\n  readonly contrastLevel: number;\n\n  /** Whether the scheme is in dark mode or light mode. */\n  readonly isDark: boolean;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually\n   * colorful.\n   */\n  readonly primaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * less colorful.\n   */\n  readonly secondaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * a different hue from primary and colorful.\n   */\n  readonly tertiaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually not\n   * colorful at all, intended for background & surface colors.\n   */\n  readonly neutralPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma\n   * of the color are specified in the design specification of the variant.\n   * Usually not colorful, but slightly more colorful than Neutral. Intended for\n   * backgrounds & surfaces.\n   */\n  readonly neutralVariantPalette: TonalPalette;\n\n  constructor(args: DynamicSchemeOptions) {\n    this.sourceColorArgb = args.sourceColorArgb;\n    this.variant = args.variant;\n    this.contrastLevel = args.contrastLevel;\n    this.isDark = args.isDark;\n    this.sourceColorHct = Hct.fromInt(args.sourceColorArgb);\n    this.primaryPalette = args.primaryPalette;\n    this.secondaryPalette = args.secondaryPalette;\n    this.tertiaryPalette = args.tertiaryPalette;\n    this.neutralPalette = args.neutralPalette;\n    this.neutralVariantPalette = args.neutralVariantPalette;\n    this.errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);\n  }\n\n  /**\n   * Support design spec'ing Dynamic Color by schemes that specify hue\n   * rotations that should be applied at certain breakpoints.\n   * @param sourceColor the source color of the theme, in HCT.\n   * @param hues The \"breakpoints\", i.e. the hues at which a rotation should\n   * be apply.\n   * @param rotations The rotation that should be applied when source color's\n   * hue is >= the same index in hues array, and <= the hue at the next index\n   * in hues array.\n   */\n  static getRotatedHue(sourceColor: Hct, hues: number[], rotations: number[]):\n      number {\n    const sourceHue = sourceColor.hue;\n    if (hues.length !== rotations.length) {\n      throw new Error(`mismatch between hue length ${hues.length} & rotations ${\n          rotations.length}`);\n    }\n    if (rotations.length === 1) {\n      return math.sanitizeDegreesDouble(sourceColor.hue + rotations[0]);\n    }\n    const size = hues.length;\n    for (let i = 0; i <= size - 2; i++) {\n      const thisHue = hues[i];\n      const nextHue = hues[i + 1];\n      if (thisHue < sourceHue && sourceHue < nextHue) {\n        return math.sanitizeDegreesDouble(sourceHue + rotations[i]);\n      }\n    }\n    // If this statement executes, something is wrong, there should have been a\n    // rotation found using the arrays.\n    return sourceHue;\n  }\n\n\n  getArgb(dynamicColor: DynamicColor): number {\n    return dynamicColor.getArgb(this);\n  }\n\n  getHct(dynamicColor: DynamicColor): Hct {\n    return dynamicColor.getHct(this);\n  }\n\n  get primaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.primaryPaletteKeyColor);\n  }\n\n  get secondaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryPaletteKeyColor);\n  }\n\n  get tertiaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryPaletteKeyColor);\n  }\n\n  get neutralPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.neutralPaletteKeyColor);\n  }\n\n  get neutralVariantPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.neutralVariantPaletteKeyColor);\n  }\n\n  get background(): number {\n    return this.getArgb(MaterialDynamicColors.background);\n  }\n\n  get onBackground(): number {\n    return this.getArgb(MaterialDynamicColors.onBackground);\n  }\n\n  get surface(): number {\n    return this.getArgb(MaterialDynamicColors.surface);\n  }\n\n  get surfaceDim(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceDim);\n  }\n\n  get surfaceBright(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceBright);\n  }\n\n  get surfaceContainerLowest(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerLowest);\n  }\n\n  get surfaceContainerLow(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerLow);\n  }\n\n  get surfaceContainer(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainer);\n  }\n\n  get surfaceContainerHigh(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerHigh);\n  }\n\n  get surfaceContainerHighest(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerHighest);\n  }\n\n  get onSurface(): number {\n    return this.getArgb(MaterialDynamicColors.onSurface);\n  }\n\n  get surfaceVariant(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceVariant);\n  }\n\n  get onSurfaceVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onSurfaceVariant);\n  }\n\n  get inverseSurface(): number {\n    return this.getArgb(MaterialDynamicColors.inverseSurface);\n  }\n\n  get inverseOnSurface(): number {\n    return this.getArgb(MaterialDynamicColors.inverseOnSurface);\n  }\n\n  get outline(): number {\n    return this.getArgb(MaterialDynamicColors.outline);\n  }\n\n  get outlineVariant(): number {\n    return this.getArgb(MaterialDynamicColors.outlineVariant);\n  }\n\n  get shadow(): number {\n    return this.getArgb(MaterialDynamicColors.shadow);\n  }\n\n  get scrim(): number {\n    return this.getArgb(MaterialDynamicColors.scrim);\n  }\n\n  get surfaceTint(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceTint);\n  }\n\n  get primary(): number {\n    return this.getArgb(MaterialDynamicColors.primary);\n  }\n\n  get onPrimary(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimary);\n  }\n\n  get primaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.primaryContainer);\n  }\n\n  get onPrimaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryContainer);\n  }\n\n  get inversePrimary(): number {\n    return this.getArgb(MaterialDynamicColors.inversePrimary);\n  }\n\n  get secondary(): number {\n    return this.getArgb(MaterialDynamicColors.secondary);\n  }\n\n  get onSecondary(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondary);\n  }\n\n  get secondaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryContainer);\n  }\n\n  get onSecondaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryContainer);\n  }\n\n  get tertiary(): number {\n    return this.getArgb(MaterialDynamicColors.tertiary);\n  }\n\n  get onTertiary(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiary);\n  }\n\n  get tertiaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryContainer);\n  }\n\n  get onTertiaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryContainer);\n  }\n\n  get error(): number {\n    return this.getArgb(MaterialDynamicColors.error);\n  }\n\n  get onError(): number {\n    return this.getArgb(MaterialDynamicColors.onError);\n  }\n\n  get errorContainer(): number {\n    return this.getArgb(MaterialDynamicColors.errorContainer);\n  }\n\n  get onErrorContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onErrorContainer);\n  }\n\n  get primaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.primaryFixed);\n  }\n\n  get primaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.primaryFixedDim);\n  }\n\n  get onPrimaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryFixed);\n  }\n\n  get onPrimaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryFixedVariant);\n  }\n\n  get secondaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryFixed);\n  }\n\n  get secondaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryFixedDim);\n  }\n\n  get onSecondaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryFixed);\n  }\n\n  get onSecondaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryFixedVariant);\n  }\n\n  get tertiaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryFixed);\n  }\n\n  get tertiaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryFixedDim);\n  }\n\n  get onTertiaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryFixed);\n  }\n\n  get onTertiaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryFixedVariant);\n  }\n}\n"]}